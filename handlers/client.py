# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import math
import re
import datetime
import tempfile
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import cv2
import matplotlib.pyplot as plt
import numpy as np
from aiogram import types, Router, F
from aiogram.types import FSInputFile
from aiogram.filters import Command, StateFilter, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from pyzbar import pyzbar
from utils.qrcode import qrcheck

# –ò–º–ø–æ—Ä—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from create_bot import bot
from db import sqlite_db
from keyboards.client_kb import *
from utils.report_navigation import *
from utils.exchange_rates import get_exchange
from utils.filters import if_numbers_filter, check_user_process
from utils.converter import convert_currency_xe
from utils.edit_date import *
from utils.goals import *


#–†–æ—É—Ç–µ—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤
client_router = Router()

# –°–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
users: dict = {}


class FSMConvert(StatesGroup):
    """
    –ö–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç (Finite State Machine) –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
        value: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.
        currency: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã.
        currency_else: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã.
    """
    value = State()
    currency = State()
    currency_else = State()


class FSMComment(StatesGroup):
    """
    –ö–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç (Finite State Machine) –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
        comment: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
    """
    comment = State()


class FSMGoal(StatesGroup):
    """
    –ö–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç (Finite State Machine) –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª—è–º–∏.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
        name: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏.
        summ: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ü–µ–ª–∏.
        date: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ü–µ–ª–∏.
    """
    name = State()
    summ = State()
    date = State()


class FSMGoalChangeSum(StatesGroup):
    """
    –ö–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç (Finite State Machine) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã —Ü–µ–ª–∏.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
        new_sum: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—É–º–º—ã —Ü–µ–ª–∏.
    """
    new_sum = State()


class FSMGoalChangeDate(StatesGroup):
    """
    –ö–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç (Finite State Machine) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã —Ü–µ–ª–∏.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
        new_date: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã —Ü–µ–ª–∏.
    """
    new_date = State()



@client_router.message(CommandStart())
async def start_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start"""

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    if message.from_user.id not in users:
        users[message.from_user.id]: dict = {
                'in_process': False,
                'items': [],
                'check': [],
                'receipt': None
        }
        await sqlite_db.add_user(user_id=message.from_user.id, name=message.from_user.first_name)

    await message.answer(f'{message.from_user.first_name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å.\n'
                             f'–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–ª–∏ –¥–æ—Ö–æ–¥–æ–≤ –≤–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞,'
                             f' –ª–∏–±–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ —Å —á–µ–∫–∞.\n'
                             f'–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')


@client_router.message(StateFilter(None), Command('help'))
async def help_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã help - –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É"""
    if await check_user_process(user_in_process=users[message.from_user.id]['in_process'],
                          message_id=message.from_user.id):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        help_text = (
            "ü§ñ  <b>–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç</b> —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–æ—Ö–æ–¥–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏, –∞ —Ç–∞–∫–∂–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ü–µ–ª—è–º–∏.\n\n"
            "‚ÑπÔ∏è –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ –¥–æ—Ö–æ–¥–∞—Ö –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö, –≤–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ –∏–ª–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ</b>, "
            "–Ω–∞–ø—Ä–∏–º–µ—Ä, 26*4 –∏–ª–∏ 236+189.\n"
            "\t\t\t\t\t\t–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é <b>QR-–∫–æ–¥–∞</b> –Ω–∞ —á–µ–∫–µ.\n\n"
            "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ <b>—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ü–µ–ª—è–º–∏</b> /goals.\n"
            "\t\t\t\t\t\t–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É–º–º—ã –∫ —Ü–µ–ª—è–º - –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ö —Ü–µ–ª—è–º'.\n\n"
            "üí∞ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ <b>–∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç</b> /kurs. \n\n"
            "üí° –ü–æ–ª–µ–∑–Ω—ã–µ <b>—Å–æ–≤–µ—Ç—ã</b> –ø–æ –≤–µ–¥–µ–Ω–∏—é –±—é–¥–∂–µ—Ç–∞ /advice. \n\n"
            "üí∂ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç:</b> –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /convert, –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É.\n"
            "\t\t\t\t\t\t–î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –≤–∞–ª—é—Ç, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ (–î—Ä—É–≥–∞—è –ø–∞—Ä–∞ –≤–∞–ª—é—Ç)\n"
            "\t\t\t\t\t\t–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —Å—É–º–º—É (–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —Å—É–º–º—É).\n"
            "\t\t\t\t\t\t<b>–í–∞–∂–Ω–æ!</b> –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!\n\n"
            "üìä <b>–û—Ç—á–µ—Ç—ã</b> –ø–æ–º–æ–≥—É—Ç –≤–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º /report."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(help_text, parse_mode='html')


@client_router.message(StateFilter(None), Command('advice'))
async def get_advice(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã get_advice - –≤—ã–≤–æ–¥ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –≤–µ–¥–µ–Ω–∏—é –±—é–¥–∂–µ—Ç–∞"""
    if await check_user_process(user_in_process=users[message.from_user.id]['in_process'],
                                message_id=message.from_user.id):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–≤–µ—Ç–∞–º–∏
        advice_text = (
            "–í–æ—Ç <b>–ø—è—Ç—å –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤</b> –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞: \n\n"
            "1. <b>–≠–∫–æ–Ω–æ–º—å—Ç–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ:</b> –ù–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ —á–∞—Å—Ç—å —Å–≤–æ–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ü–µ–ª–µ–π –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞. "
            "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∏—Ö —Å—É–º–º –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤ –±—É–¥—É—â–µ–º. \n\n"
            "2. <b>–ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç—è–º:</b> –°–æ–∑–¥–∞–π—Ç–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ñ–æ–Ω–¥ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤, "
            "—Ç–∞–∫–∏—Ö –∫–∞–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å—á–µ—Ç–∞ –∏–ª–∏ —Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ "
            "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å. \n\n"
            "3. <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã:</b> –í–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π —É—á–µ—Ç –≤—Å–µ—Ö —Å–≤–æ–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤. "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–Ω—è—Ç—å, –∫—É–¥–∞ —É—Ö–æ–¥—è—Ç –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏, –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–∞—Å—Ç–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å. \n\n"
            "4. <b>–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞—Ç—Ä–∞—Ç—ã:</b> –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ "
            "–¥–µ–Ω–µ–≥ —É –≤–∞—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—Ä—ã—Ç–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤. "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–ª–∏—à–Ω–∏—Ö —Ç—Ä–∞—Ç –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ. \n\n"
            "5. <b>–ò–∑—É—á–∞–π—Ç–µ –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–π—Ç–µ—Å—å:</b> –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±—É—á–∞–π—Ç–µ—Å—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –Ω–∞–≤—ã–∫–∞–º, —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏, "
            "—Å–ª–µ–¥–∏—Ç–µ –∑–∞ –±–ª–æ–≥–∞–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö. "
            "–ß–µ–º –±–æ–ª—å—à–µ –≤—ã –∑–Ω–∞–µ—Ç–µ –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, —Ç–µ–º –ª—É—á—à–µ –±—É–¥–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –±—é–¥–∂–µ—Ç–æ–º.\n\n"
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–¥–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Å—Å—ã–ª–∫–∞–º:\n"
            '<a href="https://expobank.ru/blog/kak-povysit-finansovuyu-gramotnost-10-prostykh-pravil/">–ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å: 10 –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª</a>\n'
            '<a href="https://theoryandpractice.ru/posts/18520-30-shagov-k-finansovoy-gramotnosti">30 —à–∞–≥–æ–≤ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏</a>\n'
            '<a href="https://www.vtb.ru/articles/chto-takoe-finansovaya-gramotnost/">–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å</a>'
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–≤–µ—Ç–∞–º–∏
        await message.answer(advice_text, parse_mode='html')


@client_router.message(StateFilter(None), Command('kurs'))
async def exchange(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /kurs –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –æ–±–º–µ–Ω–∞."""
    if await check_user_process(user_in_process=users[message.from_user.id]['in_process'],
                                message_id=message.from_user.id):
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç
        msg_text = get_exchange()

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞
        await bot.send_message(message.from_user.id, msg_text)


@client_router.message(StateFilter(None), Command('goals'))
async def goals_info(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /goals –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ü–µ–ª—è–º."""
    if await check_user_process(user_in_process=users[message.from_user.id]['in_process'],
                                message_id=message.from_user.id):
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª—è—Ö
        await bot.send_message(message.from_user.id, '–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏',
                               reply_markup=await get_goals_all(message.from_user.id))


@client_router.callback_query(StateFilter(None), F.data == 'add_goal')
async def add_goal(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏.
    –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ü–µ–ª–∏.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–ª–∏.

    Returns:
        None
    """
    if await check_user_process(user_in_process=users[callback.from_user.id]['in_process'],
                                message_id=callback.from_user.id):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users[callback.from_user.id]['in_process'] = True

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–º—É –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º
        await state.set_data({'msg': callback.message})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏
        await callback.message.answer(text='üí≠ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏',
                                      reply_markup=InlineKeyboardMarkup(inline_keyboard=[[cancel_button]]))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        await state.set_state(FSMGoal.name)


@client_router.message(FSMGoal.name, F.text)
async def add_goal_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–ø—Ä–æ—Å—É –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ü–µ–ª–∏.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ü–µ–ª–∏.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–ª–∏.

    Returns:
        None
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–æ–º —É–¥–∞–ª–∏–º
    await state.set_data({'name': message.text,
                          'msg': data['msg'],
                          'del_msg_id': [message.message_id - 1, message.message_id]})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å—É–º–º—ã
    await message.answer(text='üí≠ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–µ–ª–∏')

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    await state.set_state(FSMGoal.summ)


@client_router.message(FSMGoal.summ, F.text)
async def add_goal_summ(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—É–º–º–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—É–º–º—É —Ü–µ–ª–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–ø—Ä–æ—Å—É –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ü–µ–ª–∏.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—É–º–º–æ–π —Ü–µ–ª–∏.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–ª–∏.

    Returns:
        None
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    del_msg_list = data['del_msg_id']
    del_msg_list += [message.message_id - 1, message.message_id]

    if not if_numbers_filter(message):
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –∑–∞–Ω–æ–≤–æ
        await message.answer(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Å–Ω–æ–≤–∞
        await state.set_state(FSMGoal.summ)
    else:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–ª–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        await state.set_data({'name': data['name'],
                              'msg': data['msg'],
                              'del_msg_id': del_msg_list,
                              'summ': message.text})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ü–µ–ª–∏
        await message.answer(text='üí≠ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ü—Ä–∏–º–µ—Ä - 2024-3-18)')

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
        await state.set_state(FSMGoal.date)


@client_router.message(FSMGoal.date, F.text)
async def add_goal_date(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –Ω–∞ —Ç–æ, —á—Ç–æ –æ–Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±—É–¥—É—â–µ–µ.
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ü–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ü–µ–ª–∏.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–ª–∏.

    Returns:
        None
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    del_msg_list = data['del_msg_id']
    del_msg_list += [message.message_id - 1, message.message_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ —Ç–æ, —á—Ç–æ –æ–Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±—É–¥—É—â–µ–µ
    if not is_valid_future_date(message.text):
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –∑–∞–Ω–æ–≤–æ
        await message.answer(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. '
                             f'–õ–∏–±–æ –¥–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD (–ø—Ä–∏–º–µ—Ä - 2024-3-18)), '
                             f'–ª–∏–±–æ –¥–∞—Ç–∞ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π. '
                             f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ.')
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Å–Ω–æ–≤–∞
        await state.set_state(FSMGoal.date)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await sqlite_db.add_goal_in_db(user_id=message.from_user.id,
                                       name=data['name'],
                                       summ=data['summ'],
                                       date=str(datetime.strptime(message.text, '%Y-%m-%d').date()))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await data['msg'].edit_reply_markup(reply_markup=await get_goals_all(message.from_user.id))

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg_id in del_msg_list:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        users[message.from_user.id]['in_process'] = False
        await state.clear()


@client_router.callback_query(StateFilter(None), F.data.startswith('goal_'))
async def about_goal(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏.
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–ª–∏.

    Returns:
        None
    """
    if await check_user_process(user_in_process=users[callback.from_user.id]['in_process'],
                                message_id=callback.from_user.id):
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–ª–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        goal_id = int(re.findall(r'\d+', callback.data)[0])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏
        new_text = await about_goal_info(goal_id)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–ª–∏
        await bot.edit_message_text(text=new_text, chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                    reply_markup=about_goal_kb(goal_id=goal_id), parse_mode='html')


@client_router.callback_query(StateFilter(None), F.data == '–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É')
async def change_goal_sum(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É" –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã —Ü–µ–ª–∏.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
        state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.

    Returns:
        None
    """
    if await check_user_process(user_in_process=users[callback.from_user.id]['in_process'],
                                message_id=callback.from_user.id):
        users[callback.from_user.id]['in_process'] = True
        await state.set_data({'msg': callback.message,
                              'del_msg_id': []})
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Å—É–º–º—ã
        await callback.message.answer(text='üí≠ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É',
                                      reply_markup=InlineKeyboardMarkup(inline_keyboard=[[cancel_button]]))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—É–º–º—ã
        await state.set_state(FSMGoalChangeSum.new_sum)


@client_router.message(FSMGoalChangeSum.new_sum, F.text)
async def new_goal_sum(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—É–º–º—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏.
    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–ª–∏.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.

    Returns:
        None
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    del_msg_list = data['del_msg_id']
    del_msg_list += [message.message_id - 1, message.message_id]

    if not if_numbers_filter(message):
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –∑–∞–Ω–æ–≤–æ
        await message.answer(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Å–Ω–æ–≤–∞
        await state.set_state(FSMGoalChangeSum.new_sum)
    else:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–ª–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
        goal_id = get_goal_id(data['msg'])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É —Ü–µ–ª–∏ –≤ –ë–î
        await sqlite_db.change_goal(goal_id=goal_id, new_value=int(message.text), part='sum')

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–ª–∏
        await bot.edit_message_text(text=await about_goal_info(goal_id),
                                    chat_id=message.chat.id, message_id=data['msg'].message_id,
                                    reply_markup=about_goal_kb(goal_id=goal_id),
                                    parse_mode='html')

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg_id in del_msg_list:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        users[message.from_user.id]['in_process'] = False
        await state.clear()


@client_router.callback_query(StateFilter(None), F.data == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ü–µ–ª–∏')
async def change_goal_date(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ü–µ–ª–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–π –¥–∞—Ç—ã —Ü–µ–ª–∏.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.

    Returns:
        None
    """
    if await check_user_process(user_in_process=users[callback.from_user.id]['in_process'],
                                message_id=callback.from_user.id):
        users[callback.from_user.id]['in_process'] = True
        await state.set_data({'msg': callback.message, 'del_msg_id': []})
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–π –¥–∞—Ç—ã —Ü–µ–ª–∏
        await callback.message.answer(text='üí≠ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø—Ä–∏–º–µ—Ä: 2024-5-31)',
                                      reply_markup=InlineKeyboardMarkup(inline_keyboard=[[cancel_button]]))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã
        await state.set_state(FSMGoalChangeDate.new_date)


@client_router.message(FSMGoalChangeDate.new_date, F.text)
async def new_goal_date(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã —Ü–µ–ª–∏.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –∏–∑–º–µ–Ω—è–µ—Ç –¥–∞—Ç—É —Ü–µ–ª–∏ –≤ –ë–î.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.

    Returns:
        None
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()

    goal_id = get_goal_id(data['msg'])

    del_msg_list = data['del_msg_id']
    del_msg_list += [message.message_id - 1, message.message_id]

    if not is_valid_future_date(message.text):
        # –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –∑–∞–Ω–æ–≤–æ
        await message.answer(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. '
                             f'–õ–∏–±–æ –¥–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ (—Ñ–æ—Ä–º–∞—Ç - –ø—Ä–∏–º–µ—Ä: 2024-4-30), –ª–∏–±–æ –¥–∞—Ç–∞ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π. '
                             f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ.')
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã —Å–Ω–æ–≤–∞
        await state.set_state(FSMGoalChangeDate.new_date)
    else:

        # –ò–∑–º–µ–Ω—è–µ–º –¥–∞—Ç—É —Ü–µ–ª–∏ –≤ –ë–î
        await sqlite_db.change_goal(goal_id=goal_id, new_value=str(datetime.strptime(message.text, '%Y-%m-%d').date()),
                                    part='date')

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
        await bot.edit_message_text(text=await about_goal_info(goal_id),
                                    chat_id=message.chat.id, message_id=data['msg'].message_id,
                                    reply_markup=about_goal_kb(goal_id=goal_id),
                                    parse_mode='html')

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        users[message.from_user.id]['in_process'] = False
        await state.clear()

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg_id in del_msg_list:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)


@client_router.callback_query(StateFilter(None), F.data == 'back_goal')
async def back_to_goals(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.

    Returns:
        None
    """
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ñ–∏–Ω. —Ü–µ–ª–µ–π —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text('–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏', reply_markup=await get_goals_all(callback.from_user.id))


@client_router.callback_query(StateFilter(None), F.data == '–ö —Ü–µ–ª—è–º')
async def to_goals(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö —Ü–µ–ª—è–º" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.

    Returns:
        None
    """
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ñ–∏–Ω. —Ü–µ–ª–µ–π —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞—Å–æ–≤—É—é —Ü–µ–ª—å', reply_markup=await get_goals(callback.from_user.id))


@client_router.callback_query(StateFilter(None), F.data.startswith('add_sum_goal_'))
async def add_sum_to_goal(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É–º–º—ã –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.

    Returns:
        None
    """
    goal_id = int(re.findall(r'\d+', callback.data)[0])

    await sqlite_db.add_goal_balance(goal_id=goal_id, new_balance=users[callback.from_user.id]['items'][0][0])

    await callback.message.answer(await about_goal_info(goal_id) +
                                  f"\nüîπ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ü–µ–ª–∏: /goals\n"
                                  f"\nüîπ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ: {users[callback.from_user.id]['items'][0][0]} —Ä—É–±.",
                                  parse_mode='html',
                                  reply_markup=InlineKeyboardMarkup(inline_keyboard=[[cancel_button]]))

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[callback.from_user.id]['in_process'] = False
    users[callback.from_user.id]['items'] = []



@client_router.message(StateFilter(None), Command('convert'))
async def convert(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None
    """
    if await check_user_process(user_in_process=users[message.from_user.id]['in_process'],
                                message_id=message.from_user.id):
        users[message.from_user.id]['in_process'] = True
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        await state.set_state(FSMConvert.value)


@client_router.message(FSMConvert.value, F.text)
async def convert_currency(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.

    Returns:
        None
    """
    if not if_numbers_filter(message):
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –∑–∞–Ω–æ–≤–æ
        await message.answer(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Å–Ω–æ–≤–∞
        await state.set_state(FSMConvert.value)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—É–º–º—É –≤ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–æ–º —É–¥–∞–ª–∏–º
        await state.set_data({'value': int(eval(message.text)), 'msg_id': [message.message_id + 1]})


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –≤–≤–æ–¥ –ø–∞—Ä—ã –≤–∞–ª—é—Ç
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –≤–∞–ª—é—Ç', reply_markup=currency_keyboard)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä—ã –≤–∞–ª—é—Ç
        await state.set_state(FSMConvert.currency)


@client_router.callback_query(StateFilter('*'), F.data == 'convert_end')
async def cancel_convert(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Args:
        callback (types.CallbackQuery): –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    if state is None:
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    for i in data['msg_id']:
        await bot.delete_message(callback.from_user.id, i)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

    users[callback.message.chat.id]['in_process'] = False

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    await callback.answer('‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞')


@client_router.callback_query(StateFilter('*'), F.data == 'another_sum')
async def another_sum_convert(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –¥—Ä—É–≥–æ–π —Å—É–º–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã.

    Args:
        callback (types.CallbackQuery): –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥—Ä—É–≥–æ–π —Å—É–º–º—ã.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    if state is None:
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Å—É–º–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ —Å—É–º–º—ã
    await bot.delete_message(callback.from_user.id, data['msg_id'][0])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    await state.set_state(FSMConvert.value)


@client_router.callback_query(FSMConvert.currency)
async def convert_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∞–ª—é—Ç—ã.

    Args:
        callback (types.CallbackQuery): –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    if callback.data != 'else_convert':
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        values = callback.data.upper().split('/')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        data = await state.get_data()
        res = "–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
        res += str(data['value']) + " " + values[0] + " = "

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –≤–Ω–µ—à–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        convert_res = convert_currency_xe(float(data['value']), values[0], values[1])
        res += str(round(convert_res, 2)) + " " + values[1]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—ã –≤–∞–ª—é—Ç
        await state.set_state(FSMConvert.currency)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        await callback.message.answer(f'{res}')
        await callback.answer()
    else:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –¥—Ä—É–≥–æ–π –ø–∞—Ä—ã –≤–∞–ª—é—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ /\n'
                                      f'–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç:\n'
                                      f'- üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞: JPY\n'
                                      f'- üá¨üáß –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤: GBP\n'
                                      f'- üá®üá¶ –ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä: CAD\n'
                                      f'- üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä: AUD\n'
                                      f'- üá®üá≠ –®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫: CHF\n'
                                      f'- üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å: CNY\n')
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –¥—Ä—É–≥–æ–π –ø–∞—Ä—ã –≤–∞–ª—é—Ç
        await state.set_state(FSMConvert.currency_else)


@client_router.message(FSMConvert.currency_else)
async def convert_else_callback(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∞–ª—é—Ç—ã —Å –≤–≤–æ–¥–æ–º –¥—Ä—É–≥–æ–π –ø–∞—Ä—ã –≤–∞–ª—é—Ç.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π –ø–∞—Ä–æ–π –≤–∞–ª—é—Ç.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞—Ä—É –≤–∞–ª—é—Ç
        values = message.text.upper().replace(' ', '').split('/')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        data = await state.get_data()
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        data['msg_id'].append(message.message_id - 1)
        res = "–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
        res += str(data['value']) + " " + values[0] + " = "
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –≤–Ω–µ—à–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        convert_res = convert_currency_xe(float(data['value']), values[0], values[1])
        res += str(round(convert_res, 2)) + " " + values[1]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—ã –≤–∞–ª—é—Ç
        await state.set_state(FSMConvert.currency)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        await message.answer(f'{res}')

    except Exception:
        # –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –∑–∞–Ω–æ–≤–æ
        await message.answer(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –≤–∞–ª—é—Ç –∑–∞–Ω–æ–≤–æ.')
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä—ã –≤–∞–ª—é—Ç —Å–Ω–æ–≤–∞
        await state.set_state(FSMConvert.currency_else)


@client_router.callback_query(StateFilter(None), F.data == '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
async def add_comment(callback: types.CallbackQuery, state: FSMContext):
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            None
        """
    if await check_user_process(user_in_process=users[callback.from_user.id]['in_process'],
                                message_id=callback.from_user.id):
        users[callback.from_user.id]['in_process'] = True
        await state.set_data({'msg': callback.message, 'callback': callback})
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await callback.message.answer(text='üí≠ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await state.set_state(FSMComment.comment)


@client_router.message(FSMComment.comment, F.text)
async def add_comment_to_msg(message: types.Message, state: FSMContext):
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–≥–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.

        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.

        Returns:
            None
        """

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö
    data['del_msg_id'] = [message.message_id - 1, message.message_id]
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    if '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' not in data['msg'].text:
        new_text = f"{data['msg'].text}\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}"
    else:
        new_text = f"{data['msg'].text.split('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:')[0]}–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}"

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
    await bot.edit_message_text(text=new_text, chat_id=message.chat.id, message_id=data['msg'].message_id,
                                reply_markup=data['msg'].reply_markup)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for msg_id in data['del_msg_id']:
        await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)


    await data['callback'].answer('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    users[message.from_user.id]['in_process'] = False
    await state.clear()


@client_router.message(Command('report'))
async def report_cmd(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if await check_user_process(user_in_process=users[message.from_user.id]['in_process'],
                                message_id=message.from_user.id):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–∞
        date = datetime.now()
        report_month = str(date.month).zfill(2)  # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏, –µ—Å–ª–∏ –º–µ—Å—è—Ü –º–µ–Ω—å—à–µ 10
        report_year = str(date.year)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users[message.from_user.id]['report_date'] = [report_year, report_month]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result, vals, labels = await sqlite_db.get_info(message.from_user.id, users[message.from_user.id]['report_date'])

        if not vals:
            # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(message.from_user.id, f'{result}', parse_mode='html', reply_markup=
            navigation_report_keyboard(True))
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞, —Å–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            plt.figure(figsize=(9, 9))
            plt.pie(vals, labels=labels, autopct='%1.1f%%')
            plt.title('–†–∞—Å—Ö–æ–¥—ã')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.png')
            plt.savefig(temp_file.name)
            plt.close()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –¥–∏–∞–≥—Ä–∞–º–º–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            photo = FSInputFile(temp_file.name)
            await bot.send_photo(chat_id=message.from_user.id, photo=photo, caption=result,
                           reply_markup=navigation_report_keyboard(True), parse_mode='html')


@client_router.callback_query(F.data.in_({'nav_back_btn', 'cur_date', 'nav_forward_btn'}))
async def navigation_report(callback: types.CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ—Ç—á–µ—Ç–∞–º –ø–æ –º–µ—Å—è—Ü–∞–º."""
    if await check_user_process(user_in_process=users[callback.from_user.id]['in_process'],
                                message_id=callback.from_user.id):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if callback.data == 'nav_back_btn':
            await navigate_to_previous_month(users[callback.from_user.id])
            cur_date = False
        elif callback.data == 'cur_date':
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–∞
            report_month = str(datetime.now().month).zfill(2)  # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏, –µ—Å–ª–∏ –º–µ—Å—è—Ü –º–µ–Ω—å—à–µ 10
            report_year = str(datetime.now().year)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users[callback.from_user.id]['report_date'] = [report_year, report_month]
            cur_date = True
        elif callback.data == 'nav_forward_btn':
            cur_date = await navigate_to_next_month(users[callback.from_user.id], datetime.now())

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        result, vals, labels = await sqlite_db.get_info(callback.from_user.id, users[callback.from_user.id]['report_date'])

        if not vals:
            await handle_empty_report(callback.from_user.id, callback.message.message_id, result, bot, cur_date)
        else:
            await update_report_chart(callback, result, vals, labels, bot, cur_date)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–ª–±—ç–∫–∞
        await callback.answer()


@client_router.message(F.photo)
async def checkqr(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —á–µ–∫–∞.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —á–µ–∫–∞.
    """
    if await check_user_process(user_in_process=users[message.from_user.id]['in_process'],
                                message_id=message.from_user.id):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ —Å —á–µ–∫–æ–º
        photo_info = await bot.get_file(message.photo[-1].file_id)
        photo_path = photo_info.file_path

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        photo = await bot.download_file(photo_path)
        photo = np.frombuffer(photo.read(), dtype=np.uint8)
        photo = cv2.imdecode(photo, cv2.IMREAD_COLOR)

        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ QR-–∫–æ–¥–∞
        decoded_objects: list = pyzbar.decode(photo)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        if decoded_objects and len(decoded_objects) == 1:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ QR-–∫–æ–¥–∞
            qrraw = f"{str(decoded_objects[0]).split(',')[0][15:-1]}"
            try:
                pt_dict = await qrcheck(qrraw)

                receipt_date = pt_dict["data"]["json"]["dateTime"].replace('T', ' ')
                receipt_date = datetime.strptime(receipt_date, '%Y-%m-%d %H:%M:%S')

                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —á–µ–∫ —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if await sqlite_db.receipt_in_db(receipt_date, message.from_user.id):
                    await bot.send_message(message.from_user.id, f'–í—ã —É–∂–µ –≤–Ω–µ—Å–ª–∏ —ç—Ç–æ—Ç —á–µ–∫!')
                else:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞
                    users[message.from_user.id]['in_process'] = True
                    users[message.from_user.id]['msg_id'] = message.message_id
                    users[message.from_user.id]['date'] = receipt_date
                    users[message.from_user.id]['receipt'] = True
                    msg_to_user = ''

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —á–µ–∫–µ
                    for item in pt_dict["data"]["json"]["items"]:
                        users[message.from_user.id]['items'].append([int(item["sum"] / 100),''])
                        users[message.from_user.id]['check'].append([re.sub(" +", " ", item["name"]), int(item["sum"] / 100)])
                        msg_to_user += f'{re.sub(" +", " ", item["name"])}\n'

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã —á–µ–∫–∞
                    users[message.from_user.id]['check'].append(["totalSum", int(pt_dict["data"]["json"]["totalSum"] / 100)])

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —á–µ–∫–∞
                    await bot.send_message(message.from_user.id, f'‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —á–µ–∫–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏:\n\n'
                                                                 f'{msg_to_user}', reply_markup=expense_photo_categories_keyboard)
            except:
                await bot.send_message(message.from_user.id, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        elif len(decoded_objects) > 1:
            # –ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–∫–æ–≤ —Å QR-–∫–æ–¥–æ–º
            await bot.send_message(message.from_user.id, '‚ÅâÔ∏è–í–æ—É-–≤–æ—É-–≤–æ—É, –ø–æ–ª–µ–≥—á–µ! –î–∞–≤–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É')
        else:
            # –ï—Å–ª–∏ QR-–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
            await bot.send_message(message.from_user.id, 'üòï QR-–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@client_router.message(if_numbers_filter)
async def add_expense(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞/—Ä–∞—Å—Ö–æ–¥–∞.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—É–º–º–æ–π –¥–æ—Ö–æ–¥–∞/—Ä–∞—Å—Ö–æ–¥–∞.
    """
    # –ï—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if await check_user_process(user_in_process=users[message.from_user.id]['in_process'],
                                message_id=message.from_user.id):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        users[message.from_user.id]['in_process'] = True
        users[message.from_user.id]['items'].append([math.ceil(eval(message.text.replace(',', '.'))), ''])
        users[message.from_user.id]['msg_id'] = message.message_id
        users[message.from_user.id]['date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        users[message.from_user.id]['receipt'] = False

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=expense_categories_keyboard)


@client_router.callback_query(F.data == '–û—Ç–º–µ–Ω–∞')
async def cancel_callback_query(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î.

    Args:
        callback (types.CallbackQuery): CallbackQuery –æ–±—ä–µ–∫—Ç.
    """
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
    if '–í—Ä–µ–º—è' in callback.message.text:
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await sqlite_db.delete_items(callback.message.message_id - 1)
        await callback.message.edit_text(callback.message.text + '\n\nüö´ –û—Ç–º–µ–Ω–µ–Ω–æ!')
        await state.clear()
    elif '–î–∞—Ç–∞' in callback.message.text and '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ:' not in callback.message.text:
        goal_id = get_goal_id(callback.message)
        await sqlite_db.delete_goal(goal_id=goal_id)
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª—è—Ö
        await bot.send_message(callback.from_user.id, '–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏',
                               reply_markup=await get_goals_all(callback.from_user.id))
        await callback.answer('üö´ –¶–µ–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞!')
    elif "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ: " in callback.message.text:
        goal_id = get_goal_id(callback.message)
        last_sum = int(callback.message.text.split("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ: ")[1].split(' —Ä—É–±.')[0])
        await sqlite_db.delete_last_sum(goal_id=goal_id, last_sum=last_sum)
        await callback.message.edit_text(await about_goal_info(goal_id) +
                                         f'\n\nüö´ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ - {last_sum} —Ä—É–±. –æ—Ç–º–µ–Ω–µ–Ω–æ!',
                                    parse_mode='html')
    elif '–í–≤–µ–¥–∏—Ç–µ' in callback.message.text:

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        data = await state.get_data()
        if 'del_msg_id' in data.keys() and data['del_msg_id']:
            for msg in data['del_msg_id']:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg)
            await bot.send_message(chat_id=callback.message.chat.id, text='üö´ –û—Ç–º–µ–Ω–µ–Ω–æ!')
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ
            await callback.message.edit_text('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ!')
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()

        await callback.answer()
    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ
        await callback.message.edit_text('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ!')
        await callback.answer()
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[callback.from_user.id]['in_process'] = False
    users[callback.from_user.id]['items'] = []
    users[callback.from_user.id]['check'] = []
    users[callback.from_user.id]['receipt'] = None


@client_router.callback_query(F.data == '–ö —Ä–∞—Å—Ö–æ–¥–∞–º')
async def back_callback_query(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥".

    Args:
        callback (types.CallbackQuery): CallbackQuery –æ–±—ä–µ–∫—Ç.
    """
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=expense_categories_keyboard)


@client_router.callback_query(F.data == '–ö –¥–æ—Ö–æ–¥–∞–º')
async def income_callback_query(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ—Ö–æ–¥–∞.

    Args:
        callback (types.CallbackQuery): CallbackQuery –æ–±—ä–µ–∫—Ç.
    """
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=income_categories_keyboard)


@client_router.callback_query(F.data.in_({'–ï—â–µ', '–ù–∞–∑–∞–¥'}))
async def more_expenses_callback_query(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ "–ï—â–µ" –∏–ª–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤.

    Args:
        callback (types.CallbackQuery): CallbackQuery –æ–±—ä–µ–∫—Ç.
    """
    if callback.data == '–ï—â–µ':
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "–ï—â–µ"
        await callback.message.edit_reply_markup(reply_markup=more_exp_categories_keyboard)
    elif callback.data == '–ù–∞–∑–∞–¥':
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "–ù–∞–∑–∞–¥"
        if '—á–µ–∫' in callback.message.text:
            await callback.message.edit_reply_markup(reply_markup=expense_photo_categories_keyboard)
        else:
            await callback.message.edit_reply_markup(reply_markup=expense_categories_keyboard)


@client_router.callback_query(date_check)
async def update_button(callback: types.CallbackQuery):
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
    msg_text = re.search(r'\b\d{4}-\d{2}-\d{2}\b', callback.message.text).group(0)
    if callback.data == 'day_btn':
        await callback.message.edit_reply_markup(reply_markup=await days_func(msg_text))
    elif callback.data == 'month_btn':
        await callback.message.edit_reply_markup(reply_markup=await months_func(msg_text))
    elif callback.data == 'year_btn':
        await callback.message.edit_reply_markup(reply_markup=await years_func(msg_text))
    elif callback.data in ['back_date', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É']:
        await callback.message.edit_reply_markup(reply_markup=await button_ex(msg_text))
    elif callback.data in [str(i) for i in range(1, 32)]:

        new_day = await sqlite_db.change_date(callback.message.message_id - 1, callback.data, 'day')

        msg1 = callback.message.text.split('–í—Ä–µ–º—è - ')[0]
        msg2 = callback.message.text.split('–í—Ä–µ–º—è - ')[1]
        msg2 = msg2[:8] + new_day + msg2[10:]

        await callback.message.edit_text(msg1 + '–í—Ä–µ–º—è - ' + msg2, reply_markup=await button_ex(msg2[:10]))
    elif callback.data in list(months.values()):
        month = list(months.keys())[list(months.values()).index(callback.data)]
        new_month = await sqlite_db.change_date(callback.message.message_id - 1, month, 'month')

        msg1 = callback.message.text.split('–í—Ä–µ–º—è - ')[0]
        msg2 = callback.message.text.split('–í—Ä–µ–º—è - ')[1]
        msg2 = msg2[:5] + new_month + msg2[7:]

        await callback.message.edit_text(msg1 + '–í—Ä–µ–º—è - ' + msg2, reply_markup=await button_ex(msg2[:10]))
    elif re.match(r'^\d{4}$', callback.data) is not None:
        new_year = await sqlite_db.change_date(callback.message.message_id - 1, callback.data, 'year')

        msg1 = callback.message.text.split('–í—Ä–µ–º—è - ')[0]
        msg2 = callback.message.text.split('–í—Ä–µ–º—è - ')[1]
        msg2 = new_year + msg2[4:]

        await callback.message.edit_text(msg1 + '–í—Ä–µ–º—è - ' + msg2, reply_markup=await button_ex(msg2[:10]))
    elif callback.data == '–ì–æ—Ç–æ–≤–æ':
        await callback.message.edit_reply_markup(reply_markup=cancel_keyboard(users[callback.from_user.id]['receipt']))


@client_router.callback_query()
async def income_category_callback_query(callback: types.CallbackQuery):
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for item in users[callback.from_user.id]['items']:
        item[1] = callback.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: –¥–æ—Ö–æ–¥—ã –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã
    msg_index = '—Ä–∞—Å—Ö–æ–¥—ã'
    incomes = ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–§—Ä–∏–ª–∞–Ω—Å', '–î–∏–≤–∏–¥–µ–Ω–¥—ã', '–ë–∏–∑–Ω–µ—Å', '–£—Å–ª—É–≥–∏', '–ê—Ä–µ–Ω–¥–∞', '–î–µ–ø–æ–∑–∏—Ç—ã', '–ö—Ä–∏–ø—Ç–∞',
               '–ü–µ—Ä–µ–≤–æ–¥—ã –æ—Ç –ª—é–¥–µ–π', '–î—Ä—É–≥–æ–µ']
    if callback.data[1:] in incomes:
        msg_index = '–¥–æ—Ö–æ–¥—ã'
        await sqlite_db.add_income(users[callback.from_user.id], callback.from_user.id)
    else:
        await sqlite_db.add_expense(users[callback.from_user.id], callback.from_user.id)

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if not users[callback.from_user.id]['receipt']:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —á–µ–∫–∞
        await callback.message.edit_text(f'–í–∞—à–∏ {msg_index} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã \n'
                                      f"–í—Ä–µ–º—è - {users[callback.from_user.id]['date']}\n"
                                      f"{users[callback.from_user.id]['items'][0][1]} - "
                                      f"{users[callback.from_user.id]['items'][0][0]} —Ä—É–±.",
                                      reply_markup=cancel_keyboard(users[callback.from_user.id]['receipt']))
        # await callback.message.answer(f'–í–∞—à–∏ {msg_index} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã \n'
        #                               f"–í—Ä–µ–º—è - {users[callback.from_user.id]['date']}\n"
        #                               f"{users[callback.from_user.id]['items'][0][1]} - "
        #                               f"{users[callback.from_user.id]['items'][0][0]} —Ä—É–±.",
        #                               reply_markup=cancel_keyboard(users[callback.from_user.id]['receipt']))
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —á–µ–∫
        msg_to_user = ''
        for item in users[callback.from_user.id]['check'][:-1]:
            msg_to_user += f'{item[0]} - {item[1]} —Ä—É–±.\n'
        await callback.message.edit_text(f'–í–∞—à–∏ {msg_index} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã \n'
                                      f"–í—Ä–µ–º—è - {users[callback.from_user.id]['date']}\n\n"
                                      f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ–∫–∞:\n"
                                      f"{msg_to_user}\n"
                                      f"{callback.data} - {users[callback.from_user.id]['check'][-1][1]} —Ä—É–±.", reply_markup=cancel_keyboard(users[callback.from_user.id]['receipt']))
        # await callback.message.answer(f'–í–∞—à–∏ {msg_index} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã \n'
        #                               f"–í—Ä–µ–º—è - {users[callback.from_user.id]['date']}\n\n"
        #                               f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ–∫–∞:\n"
        #                               f"{msg_to_user}\n"
        #                               f"{callback.data} - {users[callback.from_user.id]['check'][-1][1]} —Ä—É–±.", reply_markup=cancel_keyboard(users[callback.from_user.id]['receipt']))
        users[callback.from_user.id]['check'] = []

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[callback.from_user.id]['in_process'] = False
    users[callback.from_user.id]['items'] = []
    users[callback.from_user.id]['receipt'] = None




